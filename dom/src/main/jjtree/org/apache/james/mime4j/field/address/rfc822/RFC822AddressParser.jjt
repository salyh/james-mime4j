/****************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one   *
 * or more contributor license agreements.  See the NOTICE file *
 * distributed with this work for additional information        *
 * regarding copyright ownership.  The ASF licenses this file   *
 * to you under the Apache License, Version 2.0 (the            *
 * "License"); you may not use this file except in compliance   *
 * with the License.  You may obtain a copy of the License at   *
 *                                                              *
 *   http://www.apache.org/licenses/LICENSE-2.0                 *
 *                                                              *
 * Unless required by applicable law or agreed to in writing,   *
 * software distributed under the License is distributed on an  *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
 * KIND, either express or implied.  See the License for the    *
 * specific language governing permissions and limitations      *
 * under the License.                                           *
 ****************************************************************/


/**
 * RFC822 address parser.
 *
 * Created 11/26/2014
 * by Hendrik Saly (salyh@apache.org) based on the work from Joe Cheng <code@joecheng.com>
 */

options {
	STATIC=false;
	LOOKAHEAD=1;
	JDK_VERSION = "1.5";
	VISITOR=true;
	MULTI=true;
	NODE_SCOPE_HOOK=true;
	NODE_EXTENDS="org.apache.james.mime4j.field.address.rfc822.BaseNode"; 
	DEBUG_PARSER=true;
	DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(RFC822AddressParser)
/****************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one   *
 * or more contributor license agreements.  See the NOTICE file *
 * distributed with this work for additional information        *
 * regarding copyright ownership.  The ASF licenses this file   *
 * to you under the Apache License, Version 2.0 (the            *
 * "License"); you may not use this file except in compliance   *
 * with the License.  You may obtain a copy of the License at   *
 *                                                              *
 *   http://www.apache.org/licenses/LICENSE-2.0                 *
 *                                                              *
 * Unless required by applicable law or agreed to in writing,   *
 * software distributed under the License is distributed on an  *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
 * KIND, either express or implied.  See the License for the    *
 * specific language governing permissions and limitations      *
 * under the License.                                           *
 ****************************************************************/
package org.apache.james.mime4j.field.address.rfc822;

public class RFC822AddressParser {
    public static void main(String args[]) throws ParseException {
        while (true) {
            try {
                RFC822AddressParser parser = new RFC822AddressParser(System.in);
                parser.parseLine();
                ((SimpleNode) parser.jjtree.rootNode()).dump("> ");
            } catch (Exception x) {
                x.printStackTrace();
                return;
            }
        }
    }

    public ASTaddress parseAddress() throws ParseException {
        try {
            parseAddress0();
            return (ASTaddress) jjtree.rootNode();
        } catch (TokenMgrError tme) {
            throw new ParseException(tme.getMessage());
        }
    }

    public ASTmailbox parseMailbox() throws ParseException {
        try {
            parseMailbox0();
            return (ASTmailbox) jjtree.rootNode();
        } catch (TokenMgrError tme) {
            throw new ParseException(tme.getMessage());
        }
    }


    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode) n).firstToken = getToken(1);
    }

    void jjtreeCloseNodeScope(Node n) {
        ((SimpleNode) n).lastToken = getToken(0);
    }
}

PARSER_END(RFC822AddressParser)

void parseLine() #void :
{}
{
	address() ["\r"] "\n"
}

void parseAddress0() #void :
{}
{
	address() <EOF>
}

void parseMailbox0() #void :
{}
{
	mailbox() <EOF>
}

void address() :
{}
{
	LOOKAHEAD(2147483647)
	mailbox()
|	group()
}

void mailbox() :
{}
{
	LOOKAHEAD(2147483647)
	addr_spec()
|	(phrase() route_addr())
}

void group() :
{}
{
	phrase() ":"
	[ mailbox() ]
	(
		","
		[ mailbox() ]
	)*
	";"
}

void route_addr() :
{}
{
	"<" [ route() ] addr_spec() ">"
}

void route() :
{}
{
	"@" domain() ( (",")* "@" domain() )* ":"
}

void addr_spec() :
{}
{
	( local_part() "@" domain() )
}

void local_part() :
{}
{
	word() ( (".") word() )*
}

void sub_domain() :
{}
{
(	<ATOM>
|	<DOMAINLITERAL>
)
}


void domain() :
{}
{
	sub_domain() ( (".") sub_domain() )*
}



/*
###
*/

void word() :
{}
{
(	<ATOM>
|	<QUOTEDSTRING>
)
}


void phrase() :
{}
{
(word())+
}

/*
###
*/
/*
SPECIAL_TOKEN :
{
 	< WS: ( [" ", "\t"] )+ >
}
*/
TOKEN :
{
   < ATOM: (
		      ~["(" , ")" , "<" , ">" , "@"
              , "," , ";" , ":" , "\\" , "\""
              , "." , "[" , "]" , " ", "\u0080"-"\uffff", "\u0000" - "\u001f"]
            )+ >
}


// GLOBALS
<*>
TOKEN :
{

    < #CHAR:  ["\u0000" - "\u007f"] >
|	< #QUOTEDPAIR: "\\" <CHAR> >
|   < #DTEXT: (~["\u0080"-"\uffff", "[", "]", "\\", "\r"] | <LINEARWS>)* >
|   < #QTEXT: (~["\u0080"-"\uffff", "\"", "\\", "\r"] | <LINEARWS>)* >
|   < #LINEARWS: ( ("\r" "\n")? " "|"\t" )+ >
|   < QUOTEDSTRING: "\"" (<QTEXT> | <QUOTEDPAIR>)* "\"" >
|   < DOMAINLITERAL: "[" (<DTEXT> | <QUOTEDPAIR>)* "]" >
}